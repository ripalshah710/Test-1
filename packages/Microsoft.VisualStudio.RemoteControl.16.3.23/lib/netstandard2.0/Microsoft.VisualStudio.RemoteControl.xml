<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.RemoteControl</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.RemoteControl.FileReader">
            <summary>
            An instance of this class represents reading from a particular file from disk.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.GetFileResult">
            <summary>
            Holds information about the settings file, downloaded from the server or from the
            local IE cache. Returned by calls to methods in this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.Code">
            <summary>
            Gets or sets a status code of the response from server
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.RespStream">
            <summary>
            Gets or sets a stream to read the content of the settings file.
            ! May be null if <seealso cref="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.Code" /> is not OK.
            ! Callers must call Dispose on this object if it is not null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.IsFromCache">
            <summary>
            Gets or sets a value indicating whether this information is obtained from IE cache.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.AgeSeconds">
            <summary>
            Gets or sets the Age of the file in the cache if
            <seealso cref="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.IsFromCache" /> is true, returns . Otherwise null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.ErrorMessage">
            <summary>
            Gets or sets the error message if <seealso cref="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.Code" /> is not
            OK or NotFound.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether <seealso cref="P:Microsoft.VisualStudio.RemoteControl.GetFileResult.Code" /> is OK or
            NotFound.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.IFileReader">
            <summary>
            An instance of this class represents reading from a particular file from disk.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale">
            <summary>
            Specifies the behavior of the IRemoteControlClient.ReadFile method
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale.ReturnStale">
            <summary>
            Return the settings file in the local cache irrespective of staleness.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale.ReturnNull">
            <summary>
            Return the settings file in the local cache if it is not stale. Otherwise return Null.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale.ForceDownload">
            <summary>
            Revalidate or download the file from the server and return it. WARNING:
            * each server request is billed and costs add up from millions of clients.
            * the only acceptable use of ForceDownload is very infrequently and if you absolutely cannot function
              without the latest settings
            * keep in mind that even once-per-process-lifetime may be too much if you process starts and stops very
              frequently.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.IRemoteControlClient">
            <summary>
            Interface for the client for the Remote Control Service.
            This client polls the service for a single settings file and keeps it up-to-date in the local IE cache (which
            is per-user). Developers may call the <see cref="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlClient.ReadFile(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)" /> or
            <see cref="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlClient.ReadFileAsync(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)" /> to read settings file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.IRemoteControlClient.FullUrl">
            <summary>
            Gets a full URL used to download to the file. Read-Only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.IRemoteControlClient.PollingIntervalMins">
            <summary>
            Gets a polling Interval to check the file on the server. Read-Only.
            This setting also determines when a file in the local IE cache is
            considered stale.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlClient.ReadFile(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)">
            <summary>
            Reads the settings file based on the <paramref name="staleBehavior" /> specified.
            </summary>
            <param name="staleBehavior">See <see cref="T:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale" /> for details about each possible setting.
            In most cases use the BehaviorOnStale.ReturnStale setting.
            !! WARNING about using BehaviorOnStale.ForceDownload !!
            * each server request is billed and costs add up from millions of clients.
            * the only acceptable use of ForceDownload is very infrequently and if you absolutely cannot function
              without the latest settings.
            * keep in mind that even once-per-process-lifetime may be too much if you process starts and stops very
              frequently.
            </param>
            <returns>A Stream that can be used to read the setting file. !Callers must call Dispose on this stream
            object returned. Or Null is returned in case of failure to get the file (or if server returned
            NotFound).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlClient.ReadFileAsync(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)">
            <summary>
            Reads the settings file based on the <paramref name="staleBehavior" /> specified. This is the Async version
            of ReadFile method.
            </summary>
            <param name="staleBehavior">See <see cref="T:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale" /> for details about each possible setting.
            In most cases use the BehaviorOnStale.ReturnStale setting.</param>
            <returns>A Stream that can be used to read the setting file. !Callers must call Dispose on this stream
            object returned. Or Null is returned in case of failure to get the file (or if server returned
            NotFound).</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor">
            <summary>
            Provides operation to issue HTTP requests to obtain a file, either from the server or from the local IE cache.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.GetFileFromServerAsync">
            <summary>
            Reads the file from the server url.
            In case of errors reading the file from the server, returned <see cref="T:Microsoft.VisualStudio.RemoteControl.GetFileResult" /> object's
            IsSuccessStatusCode value will be false.
            </summary>
            <returns>Information about the file obtained from the server</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.GetFileFromCacheAsync">
            <summary>
            Reads the file from the local IE cache only.
            If the file does not exist in the cache, the returned <see cref="T:Microsoft.VisualStudio.RemoteControl.GetFileResult" /> object's IsCached value
            will be false and Code will be Unused.
            </summary>
            <returns>Information about the file in the IE cache</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.LastServerRequestErrorSecondsAgoAsync">
            <summary>
            Gets the elapsed time (in seconds) since the last error in downloading / revalidating the file from the
            server.
            </summary>
            <returns>Time in seconds since last error or Int.MaxValue if no error has ever occured.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor.Cancel">
            <summary>
            Cancels all in progress HTTP requests. Any future calls to this class should not be made.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.RemoteControlClient">
            <summary>
            Client for the Remote Control Service.
            This client polls the service for a single settings file and keeps it up-to-date in the local IE cache (which
            is per-user).
            Developers may call the <see cref="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.ReadFile(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)" /> or <see cref="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.ReadFileAsync(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)" /> to read settings file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the client and starts polling.
            </summary>
            <param name="hostId">HostId of the settings file (used to construct URL to the file:
            [baseUrl]/[hostId]/[relativePath]).</param>
            <param name="baseUrl">Base URL of the service e.g. https://az700632.vo.msecnd.net</param>
            <param name="relativePath">Relative path used to contruct the full URL to the file:
            [baseUrl]/[hostId]/[relativePath]</param>
            <param name="pollingIntervalMins">Optional. Default = 1440 minutes (24 hours). Min allowed = 5 minutes.
            Polling Interval (in minutes) to check the file on the server when the last request to the server
            succeeded.</param>
            <param name="theHttpRequestTimeoutSeconds">Optional. Default = 60 seconds. Maximum allowed = 60 seconds.
            HTTP request timeout used.</param>
            <param name="overrideReadFileTelemetryFrequency">Optional. Allows to set how often to send successful
            ReadFile telemetry, to prevent noise events Default = 1 (meaning post ReadFile telemetry every time). Min
            allowed is 1.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.#ctor(Microsoft.VisualStudio.RemoteControl.IRemoteControlHTTPRequestor,Microsoft.VisualStudio.Utilities.Internal.IRegistryTools,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Only for testing. Testing "fake" IE Cache or "fake" server response
            </summary>
            <param name="requestor"></param>
            <param name="theRegistryTools"></param>
            <param name="hostId"></param>
            <param name="baseUrl"></param>
            <param name="relativePath"></param>
            <param name="pollingIntervalMins"></param>
            <param name="httpRequestTimeoutSeconds"></param>
            <param name="maxRandomDownloadDelaySeconds"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.#ctor(Microsoft.VisualStudio.Utilities.Internal.IRegistryTools,Microsoft.VisualStudio.RemoteControl.IFileReader,System.String,System.String,System.String)">
            <summary>
            Only for testing. Testing local functionality
            </summary>
            <param name="theRegistryTools"></param>
            <param name="theFileReader"></param>
            <param name="hostId"></param>
            <param name="baseUrl"></param>
            <param name="relativePath"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.TelemetryLogger">
            <summary>
            Gets or sets an action which allows setting of a Telemetry Logger to
            collect telemetry for usage of the Remote Control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.TelemetryLogger2">
            <summary>
            Gets or sets an action which allows setting of a Telemetry Logger to
            collect telemetry for usage of the Remote Control. Includes Pii-option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.FullUrl">
            <summary>
            Gets a full URL used to download to the file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.PollingIntervalMins">
            <summary>
            Gets a polling Interval to check the file on the server. This setting also determines
            when a file in the local IE cache is considered stale.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.ReadFile(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)">
            <summary>
            Reads the settings file based on the <paramref name="staleBehavior" /> specified.
            </summary>
            <param name="staleBehavior">See <see cref="T:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale" /> for details about each possible setting.
            In most cases use the BehaviorOnStale.ReturnStale setting.</param>
            <returns>A Stream that can be used to read the setting file. !Callers must call Dispose on this stream
            object returned. Or Null is returned in case of failure to get the file (or if server returned
            NotFound).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.ReadFileAsync(Microsoft.VisualStudio.RemoteControl.BehaviorOnStale)">
            <summary>
            Reads the settings file based on the <paramref name="staleBehavior" /> specified. This is the Async version
            of ReadFile method.
            </summary>
            <param name="staleBehavior">See <see cref="T:Microsoft.VisualStudio.RemoteControl.BehaviorOnStale" /> for details about each possible setting.
            In most cases use the BehaviorOnStale.ReturnStale setting.</param>
            <returns>A Stream that can be used to read the setting file. !Callers must call Dispose on this stream
            object returned. Or Null is returned in case of failure to get the file (or if server returned
            NotFound).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.Dispose">
            <summary>
            Disposes of client
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.CacheUpdateTimerCallback(System.Object,System.Threading.CancellationToken)">
            <summary>
            Callback method for the update timer.
            </summary>
            <param name="stateInfo">Dummy</param>
            <param name="token">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.EnsureFileIsUpToDateAsync(System.Threading.CancellationToken)">
            <summary>
            Determines if a local IE cache copy of the file is up-to-date. If no cached copy is available or the
            cached copy is not up-to-date, a request is made to the server to download or revalidate the file. The
            result of the server request is cached.
            </summary>
            <param name="cancellationToken">Cancellation token to cancel waiting of operation</param>
            <returns>Returns True if the copy in the IE cache is up-to-date by the end of the method. False in case of
            failures that prevent updating file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.GetFileAndInstrumentAsync(System.Boolean)">
            <summary>
            Get a file and send telemetry events.
            </summary>
            <param name="fromServer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlClient.InstrumentGetFile(Microsoft.VisualStudio.RemoteControl.GetFileResult)">
            <summary>
            Instruments the usage of GetFileFromCache and GetFileFromServer.
            </summary>
            <param name="fileResult"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor">
            <summary>
            Provides operation to issue HTTP requests to obtain a file, either from the server or from the local IE cache.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.#ctor(System.String,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="url">Server URL to obtain the settings file</param>
            <param name="httpRequestTimeoutMillis">Timeout in milliseconds for the HTTP requests issued by this
            class</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.Microsoft#VisualStudio#RemoteControl#IRemoteControlHTTPRequestor#GetFileFromServerAsync">
            <summary>
            Reads the file from the server url.
            In case of errors reading the file from the server, returned <see cref="T:Microsoft.VisualStudio.RemoteControl.GetFileResult" /> object's
            IsSuccessStatusCode value will be false.
            </summary>
            <returns>Information about the file obtained from the server</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.Microsoft#VisualStudio#RemoteControl#IRemoteControlHTTPRequestor#GetFileFromCacheAsync">
            <summary>
            Reads the file from the local IE cache only.
            If the file does not exist in the cache, the returned <see cref="T:Microsoft.VisualStudio.RemoteControl.GetFileResult" /> object's IsFromCache value
            will be false and Code will be Unused.
            </summary>
            <returns>Information about the file in the IE cache</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.Microsoft#VisualStudio#RemoteControl#IRemoteControlHTTPRequestor#LastServerRequestErrorSecondsAgoAsync">
            <summary>
            Gets the elapsed time (in seconds) since the last error in downloading / revalidating the file from the
            server.
            </summary>
            <returns>Time in seconds since last error or Int.MaxValue if no error has ever occured.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.Microsoft#VisualStudio#RemoteControl#IRemoteControlHTTPRequestor#Cancel">
            <summary>
            Cancels all in progress HTTP requests. Any future calls to this class should not be made.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.ExtractAgeHeaderValue(System.Net.HttpWebResponse)">
            <summary>
            Extracts the value of Age header from <paramref name="resp" />.
            </summary>
            <param name="resp">HTTP response</param>
            <returns>If Age header is present on <paramref name="resp" />can is valid,
            returns its value. Otherwise null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.CreateHttpRequest(System.String)">
             <summary>
             In .Net 4.0 and above, in some cases, ConfigurationErrorsException
             will not be catch without the HandleProcessCorruptedStateExceptions
             and SecurityCritical attributes. The method should not be async.
            
             See Bug 172014 and
             https://msdn.microsoft.com/en-us/magazine/dd419661.aspx
             </summary>
             <param name="requestUrl"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.GetFile(System.String,System.Int32,System.Net.Cache.HttpRequestCachePolicy)">
            <summary>
            This is the HTTP-facing method in the class. It essentially performs all functions of
                1. sending an HTTP request for the file
                2. if the response is from the server, ensuring that it is added to the IE cache
                3. additonal logic to cache error responses in the IE cache. By default error
                   responses are not cached.
            </summary>
            <param name="requestUrl"></param>
            <param name="requestTimeoutMillis"></param>
            <param name="cachePolicy">Specifies chache policy to use when sending the request</param>
            <returns>Result of the file lookup. See <see cref="T:Microsoft.VisualStudio.RemoteControl.GetFileResult" /> for details.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlHTTPRequestor.WrapInSeekableStreamAsync(System.IO.Stream)">
            <summary>
            Copies all data in <paramref name="s" /> to a new Memory Stream to allow seeking.
            </summary>
            <param name="s">Original Stream</param>
            <returns>A new in memory stream</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.RemoteControlUri">
            <summary>
            URI with optional redirect.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.RemoteControlUri.IsLocalFile">
            <summary>
            Gets a value indicating whether the URI points to a local file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.RemoteControlUri.FullUrl">
            <summary>
            Gets a full URI string.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RemoteControl.RemoteControlUri.HostId">
            <summary>
            Gets a Host Id which was used to initialize the URI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.RemoteControlUri.Create(Microsoft.VisualStudio.Utilities.Internal.IRegistryTools,System.String,System.String,System.String)">
            <summary>
            Creates a new URI with optional redirect.
            </summary>
            <param name="registryTools"></param>
            <param name="hostId"></param>
            <param name="baseUrl"></param>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.UriEx.SplitLastSegment(System.Uri)">
            <summary>
            Split the last path segment from the given URI.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.UriEx.AddSegment(System.Uri,System.String)">
            <summary>
            Add a path segment to the given URI. The path segment may contain trailling '/'.
            </summary>
            <param name="uri"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RemoteControl.WinINetHelper">
            <summary>
            Provides a helper method to write empty files to the local IE cache. This is useful for writing HTTP error
            responses to the cache. Although caching of error responses is entirely allowed by HTTP protocol, The
            System.Net library does not add error responses to the cache. So, this helper library is used to call
            wininet.dll functions to do so.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RemoteControl.WinINetHelper.WriteErrorResponseToCache(System.String,System.Net.HttpStatusCode)">
            <summary>
            Adds an empty file to the local IE cache with the <paramref name="status" />header for the
            specified<paramref name="url" />.
            </summary>
            <param name="url">URL for which to add the cache entry</param>
            <param name="status">Status of the response to cache</param>
            <returns>True if operation succeeded. Otherwise false.</returns>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>Ym9uY+RhaVeObJGo0sxkBph2dOg=</DigestValue></Reference></SignedInfo><SignatureValue>VPhXqY15Tnv/gl5Ju/0Tq82ieJqShnvvkLTMTm0hEUagy5CIT7t/HLnDxK/uZtO08fmDWNNZ+lIw8gVpGIr7NcseD54JFBRRBRWdktzByS1ha5nK1kWeIvtCvxhqsEovF6XD9GxmOb3ctXw7WTv0H/CjlsNgBWBJkJLiuO+hTqPr4+fbV19eR9vK4f1GglvzzZCgQB5qjTokTxd3ddkToRFo5JprrL/h3x1cBvos7Gbou7B/N70ig8h3ppuv41kfnWMg8Bsi+BG+2SVHTeAQUOt95oWL0Xj3TToEae39Q3SnJEewpkxG15x0ep9/uJCUI4zV+TdU0pnXAzAyCXLT2w==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>saeJ0/an7vTtdIicnsGFx5TflhIe/TaKK/Z4TOnp1DWwm4V/b0vvHP93iFWs0mJ1QU6i81u8VjdWwnCLQ27BMyhBNgbMErp+yfcQmi8HBhyha/qllJc+4YfUXJo2EpDhjcmzn64I97JtA0raCvJY8BMlFXkXzB8fRP+wmvzhKtnFwU9y9H1Z5RJH2pd9dBBQiw6NgaxN+TRkYxvv552YqiqhIeZVjZN9yVfPyNHyHFCqyxJlBq79AoAu8NnI5mwYQSCftCs0p0lop4F6Jf94lHQQcuEEDR++u5GBrpyXmNPEYxzCIIyQnQKBDPtpl79aYWle4/jN3Tc2f3HbM96A3w==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIE3jCCA8agAwIBAgITMwAAAS6PhGZoOb8FvQAAAAABLjANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTkwOTA2MjA0MDA0WhcNMjAxMjA0MjA0MDA0WjCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkIxQjctRjY3Ri1GRUMyMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAldsVMm8rZau3JPHTP+lBQD1P30iUjBrnmNqwmYpGaS50tuLjUDYfs926KR2JuNNiFPocG/hmgB4ZfYvc2QKr0sS/Bq1U7iixv6ENV9V/+PRuxvnZDx3Jhlsild27aOU0kUyuPpRV7Y/aqFXbdj5AniGIV9YrqlXsa93O2JXUsrQz3xfVF7ccMV7qkOwsWePR4tXm7rOleMM1Mo/Uu6nQAYzsakSwb/rc/aUVidQxv5w1uZae9RC84E9nr8UjjqBTWIC2OSNc76ivN3m+miyFPvCZnVyTlki5sPZ4m/MMo3zu/c809cLOL+nW5tzyXEIkKBTn6PmEk4ot9ZHG+3df0QIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFL6ypKnJNgl+dFHGTIKlfbRbmC4zMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBAE6h673VGjyzHPFIKk17eUqSKeQFWCmj7XXpra9FlaKwzDiJtSixvNSyFKIwDhmjjp57u5p3hOm5rdV/PDqb1Oov7/1Nt4perpko30lAlyW56zihnhOJYvL23AVpGRBhdLglJCXe5ZgcfcNejuhwMnLIfIZF/wFgSkA0FOynRVzIopTK94zxkqg0eVFW04+WXvoIyqN1ruQebBqRd2NuIgcIs03pBWkB3FX23SUuBNTi6lwUCpnlgnSx9QP4gV9+W/BBEyAxuuRpl2YCvtRAGmo2hCfJztStZb7BF1SxZuWpye8iwoCuTupiTODohC3Z9WnaRehUzJ9dXpUJKALVSFM=</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">MIIR+AYJKoZIhvcNAQcCoIIR6TCCEeUCAQMxCzAJBgUrDgMCGgUAMIIBEwYJKoZIhvcNAQcBoIIBBASCAQBU+FepjXlOe/+CXkm7/ROrzaJ4mpKGe++QtMxObSERRqDLkIhPu38cucPEr+5m07Tx+YNY01n6UjDyBWkYivs1yx4PngkUFFEFFZ2S3MHJLWFrmcrWRZ4i+0K/GGqwSi8XpcP0bGY5vdy1fDtZO/Qf8KOWw2AFYEmQkuK476FOo+vj59tXX15H28rh/UaCW/PNkKBAHmqNOiRPF3d12ROhEWjkmmusv+HfHVwG+izsZui7sH83vSKDyHemm6/jWR+dYyDwGyL4Eb7ZJUdN4BBQ633mhYvRePdNOgRp7f1DdKckR7CmTEbXnHR6n3+4kJQjjNX5N1TSmdcDMDIJctPboIIOoTCCBN4wggPGoAMCAQICEzMAAAEuj4RmaDm/Bb0AAAAAAS4wDQYJKoZIhvcNAQEFBQAwdzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTE5MDkwNjIwNDAwNFoXDTIwMTIwNDIwNDAwNFowgc4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpCMUI3LUY2N0YtRkVDMjElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJXbFTJvK2WrtyTx0z/pQUA9T99IlIwa55jasJmKRmkudLbi41A2H7PduikdibjTYhT6HBv4ZoAeGX2L3NkCq9LEvwatVO4osb+hDVfVf/j0bsb52Q8dyYZbIpXdu2jlNJFMrj6UVe2P2qhV23Y+QJ4hiFfWK6pV7GvdztiV1LK0M98X1Re3HDFe6pDsLFnj0eLV5u6zpXjDNTKP1Lup0AGM7GpEsG/63P2lFYnUMb+cNbmWnvUQvOBPZ6/FI46gU1iAtjkjXO+orzd5vposhT7wmZ1ck5ZIubD2eJvzDKN87v3PNPXCzi/p1ubc8lxCJCgU5+j5hJOKLfWRxvt3X9ECAwEAAaOCAQkwggEFMB0GA1UdDgQWBBS+sqSpyTYJfnRRxkyCpX20W5guMzAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsGAQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQBOoeu91Ro8sxzxSCpNe3lKkinkBVgpo+116a2vRZWisMw4ibUosbzUshSiMA4Zo46ee7uad4Tpua3Vfzw6m9TqL+/9TbeKXq6ZKN9JQJclues4oZ4TiWLy9twFaRkQYXS4JSQl3uWYHH3DXo7ocDJyyHyGRf8BYEpANBTsp0VcyKKUyveM8ZKoNHlRVtOPll76CMqjda7kHmwakXdjbiIHCLNN6QVpAdxV9t0lLgTU4upcFAqZ5YJ0sfUD+IFfflvwQRMgMbrkaZdmAr7UQBpqNoQnyc7UrWW+wRdUsWblqcnvIsKArk7qYkzg6IQt2fVp2kXoVMyfXV6VCSgC1UhTMIIGBzCCA++gAwIBAgIKYRZoNAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQrc7dGE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd6udOo6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDlKEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd++NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSnEUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68eeEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXDwiALAgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzALBgNVHQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1UdIwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6RhMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIQea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeKw1wDRDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxtYrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ7DsB7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mRKiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVRDupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+FChPfwgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1wlGysOUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89Ds+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BNZ8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RIzCzU2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LBJ1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HIjCPJZr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCleKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbrHk/Jmu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6L54/LlUWa8kTo/2hggOwMIICmAIBATCB/qGB1KSB0TCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkIxQjctRjY3Ri1GRUMyMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiUKAQEwCQYFKw4DAhoFAAMVAGIbEnJapVGPvd5gRMg4oPxQMQUaoIHeMIHbpIHYMIHVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEnMCUGA1UECxMebkNpcGhlciBOVFMgRVNOOjRERTktMEM1RS0zRTA5MSswKQYDVQQDEyJNaWNyb3NvZnQgVGltZSBTb3VyY2UgTWFzdGVyIENsb2NrMA0GCSqGSIb3DQEBBQUAAgUA4kMM9TAiGA8yMDIwMDQxNzAwNTcyNVoYDzIwMjAwNDE4MDA1NzI1WjB3MD0GCisGAQQBhFkKBAExLzAtMAoCBQDiQwz1AgEAMAoCAQACAiOVAgH/MAcCAQACAhjDMAoCBQDiRF51AgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwGgCjAIAgEAAgMW42ChCjAIAgEAAgMHoSAwDQYJKoZIhvcNAQEFBQADggEBADUeI2nsms0r6v1708rL/1aS619omPxSNsFmEO55mSX2SYVZQ4fUUGjDkbwtN715XCx/E3ANfxw0IS6E6grR5ZYGPhniXrv9f46YjVrUMVm06MjzEjnZ9fs9986MXLm6M3+CJ+An6pqWXvg4qjPhb/3LE48sehnBh2BimF9bvLFJCuJfcgfZ10lKvZ3REWXJdYeRf6afiOOnlhyWz5fiO7+gY2Gix0Eft1TtA1r7yJeDt/QTUrx+jhKqUMlNQnk7wBLV7A0TOlVA+aesTopa9HmlSk1RjIWwuSRmfhhhxoehC+P+itWoH3JLupvyL+sXk2zvW/+vo4zJ6MchRnTAD0oxggIVMIICEQIBATCBjjB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0ECEzMAAAEuj4RmaDm/Bb0AAAAAAS4wCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTIwMDQxNjIzMjQwOFowIwYJKoZIhvcNAQkEMRYEFIs+8ltxecH+/54rqfYILhleYa5DMA0GCSqGSIb3DQEBBQUABIIBAIAhO/tIp9ah7MFjznx461Fz69MUHqOTU3/auGgR1QYrnDkqB3dGTzQInopfGNoGTE1kN/LqanjOqdFwd6e3p7c8gP3E0sY5JcAlanYkD4xgf622XYGq/PClsUT7ZBw7ompWfo0cSPDTe94/DFutUtmozhzU1b9N46YffkMY6PyzbALqWF+5UE70IJKuMnRio9q4p97iUxxsl7FuwepoXrvrMBjDQJ0/Kzk9qXHQpPccD/hLMvRU1EFXagB+sWNRMmABA4aqe0/O4uFQuKmSCseZhNnq58JLvnEiqeYe9pH7Q571JNLfKpe0oVQyv6KuOIiRVpyGKMpPMKzT0VxiJdA=</CounterSignature></Object></Signature></doc>
